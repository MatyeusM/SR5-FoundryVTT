@use 'sass:math';
@use 'variables';
@use 'theme';
@use 'functions';

// sadly we got to use it here too, gotta remove
// it asap
@use 'sass:color';


@mixin rollable {
    &:hover {
        @include linkHovered;
        cursor: pointer;
    }
}

@mixin systemFonts {
    font-family: variables.$sans-font-stack;
}

@mixin title {
    font-family: variables.$sans-font-stack;
    color: var(--sr5-text-primary);
    @include textOutline;
}

@mixin textOutline {
    color: var(--sr5-text-primary);
    text-shadow: -1px -1px 0 var(--sr5-text-primary-inverse), 1px -1px 0 var(--sr5-text-primary-inverse), -1px 1px 0 var(--sr5-text-primary-inverse),
        1px 1px 0 var(--sr5-text-primary-inverse);
}

@mixin sheet {
    background: var(--sr5-backdrop);
    color: var(--sr5-text-primary);
}

@mixin linkHovered {
    text-shadow: 0 0 8px var(--sr5-text-secondary);
    color: var(--sr5-text-secondary);
}

/// Apply a FoundryVTT font size using a CSS variable fallback.
/// Example: @include font-size(16);
/// Base size that foundry uses at the moment (v13) is 14.
@mixin font-size($px, $lh: null) {
  font-size: var(--font-size-#{$px}, #{math.div($px, 16)}rem);
  @if $lh != null {
      line-height: $lh;
  }
}

/// Shadow mixin
@mixin shadow-elevation($elevation: 1, $color: theme.$shadow, $enhanced: true) {
  @if $elevation <= 0 {
    box-shadow: none;
  } @else {
    // Define base shadow properties
    $base-y-offset: math.ceil($elevation * 1.5px);
    $base-blur: $base-y-offset + math.ceil($elevation * 0.5px);
    $base-spread: math.floor(-$elevation * 0.25px);

    // Define enhanced (top) shadow properties if enabled
    $enhanced-y-offset: math.ceil($elevation * 0.5px);
    $enhanced-blur: $enhanced-y-offset + math.ceil($elevation * 0.25px);
    $enhanced-spread: math.floor(-$elevation * 0.125px);

    // Set the opacity for the shadows. You might want to make these configurable.
    $base-opacity: 0.14;
    $enhanced-opacity: 0.12;

    // Construct the shadow declarations
    $base-shadow: 0 $base-y-offset $base-blur $base-spread rgb(from $color r g b / $base-opacity);
    $enhanced-shadow: 0 $enhanced-y-offset $enhanced-blur $enhanced-spread rgb(from $color r g b / $enhanced-opacity);

    // Assemble the final box-shadow value
    @if $enhanced {
      box-shadow: $base-shadow, $enhanced-shadow;
    } @else {
      box-shadow: $base-shadow;
    }
  }
}
