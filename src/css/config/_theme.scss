// -----------------------------------------------------------------------------
// SCSS Theme File
//
// Purpose:
// - Handles theming variables.
// - Define visual tokens like colors, shadows, gradients, etc.
// - This file **writes to** CSS custom properties when applicable.
//
// Examples:
// - Color palette mapping
// - Light/dark mode conditions
// - CSS variable definitions for themes
// -----------------------------------------------------------------------------

@use 'functions';
@use 'sass:color';

// switch to using oklch-colors
$primary: functions.createColorMap(#ebb531); // default: 800
$secondary: functions.createColorMap(#55101e); // default: 300
$neutral: functions.createColorMap(black); // same as picking white or black
$dark-base: black; // we really should not be using black
$light-base: white; // we really should not be using white

// cannot really use the new ones yet, got to find out what is styled
// with them, to avoid potentital side-effects
// light mode variables
:where(.sr5) {
    // new variables
    --application-background: #{functions.asset('light-page.webp')} repeat;
    --application-glow: #{color.adjust(functions.getColorFromMap($primary, 800), $alpha: -1)};
    --header-title-background: linear-gradient(to right, #{functions.getColorFromMap($secondary, 300)} 30%, #{color.adjust(functions.getColorFromMap($secondary, 300), $alpha: -1)} 100%);
    // overwriting foundry
    --color-text-primary: #{$dark-base};
    --control-icon-color: #{functions.getColorFromMap($neutral, 500)};
    --control-active-icon-color:  #{functions.getColorFromMap($neutral, 600)};
}

// override with dark mode variables
// TODO: merge with prev tag as .theme-dark &, when v1 is dead
.theme-dark :where(.sr5),
.sr5.actor.sheet {
    // new variables
    --application-background:
      linear-gradient(
        #{color.adjust($dark-base, $alpha: -0.4)},
        #{color.adjust($dark-base, $alpha: -0.4)}
      ),
      #{functions.asset("page.webp")} repeat;
    --application-glow: #{color.adjust(functions.getColorFromMap($primary, 800), $alpha: -0.7)};
    --header-title-background: linear-gradient(to right, #{functions.getColorFromMap($secondary, 300)} 30%, #{color.adjust(functions.getColorFromMap($secondary, 300), $alpha: -1)} 100%);
    // overwriting foundry
    --color-text-primary: #{$light-base}; // this is the main text color, not the primary text color...
    --control-icon-color: #{functions.getColorFromMap($neutral, 500)};
    --control-active-icon-color:  #{functions.getColorFromMap($neutral, 600)};
}

// LEGACY VARIABLES, REMOVE FOR CSS VARIABLES WHENEVER POSSIBLE
$black: $dark-base;
$red: red;
$grey: functions.getColorFromMap($neutral, 600);
$white: $light-base;
$darkred: functions.getColorFromMap($secondary, 300);
$light: functions.getColorFromMap($neutral, 900);
$light-2: functions.getColorFromMap($neutral, 700);
$dark: functions.getColorFromMap($neutral, 300);
$yellow: functions.getColorFromMap($primary, 800);
$pdfColor: color.adjust(functions.getColorFromMap($primary, 800), $alpha: -0.35);//#e67260;
$fadedBlack: color.adjust($dark-base, $alpha: -0.3);

// secondary red: hue: 14.32, l: 30%
$fLightRed: #cc5e5e; // hue: 22.03, l: 61.7%
$fDarkRed: #af0505; // hue: 28.05, l: 47.5%
$bgrButton: rgba(70, 7, 7, 0.692); // hue: 26.88, l: 25.6%

$physical: red; // hue: 29.23, l: 62.8%

// primary yellow: hue 84.5%, l: 80%
$edge: #C7B002; // hue: 99.82, l: 75.4%

$color: $light-base;
$inner-color: $light-base;
$outline-color: $dark-base;

$groove-width: 1px;
$groove-color: $dark-base;
$groove: $groove-width solid $dark-base;
$border-under: 1px groove $dark-base;

$grid__cols: 12;
$sheet-max-width: 690px;

$nameplate-background: linear-gradient(to right, #{functions.getColorFromMap($secondary, 300)} 30%, #{color.adjust(functions.getColorFromMap($secondary, 300), $alpha: -1)} 100%);
